/// <reference types="vitest" />
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { resolve } from 'path'
import { visualizer } from 'rollup-plugin-visualizer'
import viteCompression from 'vite-plugin-compression'

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    // React plugin with optimizations for React 19
    react({
      // React 19 automatic runtime for smaller bundle size
      jsxRuntime: 'automatic',
      // Fast Refresh is enabled by default in @vitejs/plugin-react
      // Babel configuration for additional optimizations
      babel: {
        // Use the built-in React optimizations
        presets: [
          ['@babel/preset-react', {
            // React 19 automatic runtime
            runtime: 'automatic',
            // Enable development features in dev mode only
            development: process.env.NODE_ENV === 'development',
          }],
        ],
        plugins: [
          // Add optimization plugins when React Compiler becomes available
          // For now, use standard optimizations that work with React 19
        ],
        // Babel configuration for production optimizations
        ...(process.env.NODE_ENV === 'production' && {
          compact: true,
          comments: false,
        }),
      },
    }),
    // Bundle analyzer - generates visual representation of bundle composition
    visualizer({
      template: 'treemap', // Best for identifying large dependencies
      open: false, // Don't auto-open (CI-friendly)
      gzipSize: true, // Show gzip sizes
      brotliSize: true, // Show brotli sizes
      filename: 'dist/stats.html', // Output location
      // Generate detailed source map for better analysis
      sourcemap: true,
    }),
    // Gzip compression for better network performance
    viteCompression({
      algorithm: 'gzip',
      ext: '.gz',
      // Only compress files > 1KB
      threshold: 1024,
      // Compression level (0-9)
      compressionOptions: { level: 9 },
      // Delete original files in production
      deleteOriginFile: false,
    }),
    // Brotli compression (better than gzip for modern browsers)
    viteCompression({
      algorithm: 'brotliCompress',
      ext: '.br',
      // Only compress files > 1KB
      threshold: 1024,
      // Brotli quality (0-11)
      compressionOptions: { level: 11 },
      // Keep original files
      deleteOriginFile: false,
    }),
  ],
  resolve: {
    alias: {
      '@': resolve(__dirname, './src'),
    },
  },
  build: {
    // Enable source maps for debugging production issues
    sourcemap: true,
    // Increase warning limit slightly for better DX
    chunkSizeWarningLimit: 500,
    // Target modern browsers for smaller bundles
    target: 'es2020',
    // Use default minification settings for compatibility
    minify: true,
    // Advanced Rollup configuration
    rollupOptions: {
      output: {
        // Advanced manual chunking strategy for optimal caching
        manualChunks(id) {
          // Skip non-node_modules
          if (!id.includes('node_modules')) return
          
          // Core React libraries (rarely change, good for long-term caching)
          if (id.includes('react/') || id.includes('react-dom/')) {
            return 'react-core'
          }
          
          // React ecosystem (changes less frequently)
          if (id.includes('react-router-dom') || 
              id.includes('@tanstack/react-query') ||
              id.includes('react-hook-form') ||
              id.includes('react-error-boundary')) {
            return 'react-ecosystem'
          }
          
          // UI libraries (headless UI components)
          if (id.includes('@headlessui/react')) {
            return 'ui-headless'
          }
          
          // Icons (can be large, separate for better caching)
          if (id.includes('@heroicons/react')) {
            return 'ui-icons'
          }
          
          // Supabase SDK (all Supabase modules together)
          if (id.includes('@supabase')) {
            return 'supabase'
          }
          
          // Stripe SDK
          if (id.includes('@stripe') || id.includes('stripe')) {
            return 'stripe'
          }
          
          // State management
          if (id.includes('zustand')) {
            return 'state'
          }
          
          // HTTP client
          if (id.includes('axios')) {
            return 'http'
          }
          
          // Form validation
          if (id.includes('zod') || id.includes('@hookform/resolvers')) {
            return 'validation'
          }
          
          // Utilities (lodash, uuid, etc.)
          if (id.includes('lodash') || id.includes('uuid')) {
            return 'utils'
          }
          
          // Monitoring and error tracking
          if (id.includes('@sentry')) {
            return 'monitoring'
          }
          
          // Everything else in vendor
          return 'vendor'
        },
        // Chunk naming for better debugging
        chunkFileNames: (chunkInfo) => {
          return `assets/js/${chunkInfo.name}-[hash].js`
        },
        // Entry naming
        entryFileNames: 'assets/js/[name]-[hash].js',
        // Asset naming (CSS, images, etc.)
        assetFileNames: (assetInfo) => {
          // CSS files
          if (assetInfo.name?.endsWith('.css')) {
            return 'assets/css/[name]-[hash][extname]'
          }
          // Images
          if (assetInfo.name && (assetInfo.name.endsWith('.png') || assetInfo.name.endsWith('.jpg') || assetInfo.name.endsWith('.jpeg') || assetInfo.name.endsWith('.svg') || assetInfo.name.endsWith('.gif') || assetInfo.name.endsWith('.webp') || assetInfo.name.endsWith('.ico'))) {
            return 'assets/images/[name]-[hash][extname]'
          }
          // Fonts
          if (assetInfo.name && (assetInfo.name.endsWith('.woff') || assetInfo.name.endsWith('.woff2') || assetInfo.name.endsWith('.ttf') || assetInfo.name.endsWith('.eot') || assetInfo.name.endsWith('.otf'))) {
            return 'assets/fonts/[name]-[hash][extname]'
          }
          // Other assets
          return 'assets/[name]-[hash][extname]'
        },
      },
      // Optimize tree shaking
      treeshake: {
        preset: 'recommended',
        // Remove unused CSS modules
        moduleSideEffects: 'no-external',
      },
    },
    // CSS code splitting is enabled by default in Vite
    cssCodeSplit: true,
    // Inline assets smaller than 4KB
    assetsInlineLimit: 4096,
    // Generate module preload directives
    modulePreload: {
      // Preload polyfill for older browsers
      polyfill: true,
    },
    // Report compressed sizes
    reportCompressedSize: true,
  },
  // Optimization settings for better performance
  optimizeDeps: {
    // Pre-bundle these dependencies for faster dev server startup
    include: [
      'react',
      'react-dom',
      'react-router-dom',
      '@tanstack/react-query',
      'zustand',
      '@supabase/supabase-js',
      'axios',
    ],
    // Exclude large dependencies that should be loaded on-demand
    exclude: [
      '@stripe/stripe-js', // Load Stripe SDK only when needed
      '@sentry/react', // Load Sentry only in production
    ],
    // Use esbuild for faster dependency optimization
    esbuildOptions: {
      target: 'es2020',
      // Enable tree shaking for dependencies
      treeShaking: true,
    },
  },
  // Server configuration for development
  server: {
    // Enable dependency pre-warming for faster HMR
    warmup: {
      clientFiles: [
        './src/App.tsx',
        './src/main.tsx',
        './src/components/**/*.tsx',
        './src/pages/**/*.tsx',
      ],
    },
  },
  // Additional build configuration can be added here as needed
  // Worker configuration for web workers if needed
  worker: {
    format: 'es',
    rollupOptions: {
      output: {
        // Separate worker bundles
        entryFileNames: 'assets/workers/[name]-[hash].js',
      },
    },
  },
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: ['./src/test/setup.ts'],
    include: [
      'tests/unit/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}',
      'src/**/__tests__/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}',
    ],
    exclude: [
      'tests/e2e/**/*', 
      'tests/performance/**/*',
      'src/services/call-tracking/__tests__/load/**/*',
      'src/services/call-tracking/__tests__/integration/**/*',
    ],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html', 'lcov'],
      reportsDirectory: './coverage',
      exclude: [
        'node_modules/',
        'src/test/',
        'src/**/*.test.{ts,tsx}',
        'src/**/*.spec.{ts,tsx}',
        'src/**/__tests__/**/*',
        'src/vite-env.d.ts',
        'tests/**/*',
        'coverage/**/*',
        'dist/**/*',
        '*.config.{js,ts}',
        'eslint.config.js',
      ],
      thresholds: {
        global: {
          branches: 80,
          functions: 80,
          lines: 80,
          statements: 80,
        },
        'src/services/call-tracking/**/*.{js,ts}': {
          branches: 85,
          functions: 85,
          lines: 85,
          statements: 85,
        },
        'src/components/**/*.{jsx,tsx}': {
          branches: 75,
          functions: 75,
          lines: 75,
          statements: 75,
        },
      },
      watermarks: {
        statements: [80, 95],
        functions: [80, 95],
        branches: [80, 95],
        lines: [80, 95],
      },
    },
  },
})
