# =============================================================================
# HARDENED DEVELOPMENT DOCKERFILE WITH SECURITY MONITORING
# =============================================================================
# This development Dockerfile includes security best practices for dev environments:
# - Non-root user execution even in development
# - Security scanning integration
# - Volume mount security
# - Development security monitoring
# =============================================================================

FROM node:22-alpine@sha256:6e80991f69cc7722c561e5d14d5e72ab47c0d6b6cfb3ae50fb9cf9a7b30fdf97

# Security labels for development container
LABEL maintainer="DCE Security Team" \
      version="1.0.0-dev" \
      description="DCE Website - Secure Development Container" \
      security.scan="enabled" \
      security.non-root="true" \
      environment="development"

# Create development user with appropriate privileges
RUN addgroup -g 1000 -S devuser && \
    adduser -S devuser -u 1000 -G devuser

# Install development dependencies with security considerations
RUN apk add --no-cache --update \
    python3=~3.12 \
    make=~4.4 \
    g++=~13.2 \
    git=~2.45 \
    ca-certificates=~20240705 \
    # Add security scanning tools for development
    curl \
    jq && \
    # Remove package cache to reduce image size
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Install security scanning tools for development monitoring
RUN curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

# Set secure working directory
WORKDIR /app

# Change ownership of working directory
RUN chown -R devuser:devuser /app

# Switch to development user
USER devuser

# Copy package files with proper ownership
COPY --chown=devuser:devuser package*.json ./

# Install all dependencies including devDependencies with security audit
RUN npm ci \
    --audit-level moderate \
    --fund false \
    --silent && \
    # Verify package integrity in development
    npm audit signatures || true

# Copy application source with proper ownership
COPY --chown=devuser:devuser . .

# Create directory for development security reports
RUN mkdir -p /app/dev-security

# Run development security scan
RUN npm audit --audit-level low --json > /app/dev-security/dev-audit.json || true

# Expose development server port
EXPOSE 5173

# Health check for development server
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=2 \
    CMD node -e "require('http').get({hostname:'localhost',port:5173,path:'/',timeout:5000}, (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"

# Start development server with security monitoring
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

# =============================================================================
# DEVELOPMENT SECURITY NOTES
# =============================================================================
# This container should be run with additional security options in development:
# 
# docker run \
#   --security-opt=no-new-privileges:true \
#   --cap-drop=ALL \
#   --cap-add=CHOWN \
#   --cap-add=DAC_OVERRIDE \
#   --cap-add=FOWNER \
#   --cap-add=SETGID \
#   --cap-add=SETUID \
#   --user=1000:1000 \
#   -v $(pwd)/src:/app/src:ro \
#   -v $(pwd)/public:/app/public:ro \
#   dce-website:dev
# 
# Volume mounts are set to read-only where possible to prevent 
# accidental modification of host files.
# =============================================================================