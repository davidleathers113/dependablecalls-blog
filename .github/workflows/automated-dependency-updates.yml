name: Automated Dependency Updates

on:
  schedule:
    # Run twice weekly: Monday and Thursday at 3 AM UTC
    - cron: '0 3 * * 1,4'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to apply'
        required: true
        default: 'security'
        type: choice
        options:
        - security
        - patch
        - minor
        - major
        - all
      test_coverage:
        description: 'Test coverage required before merging'
        required: false
        default: 'full'
        type: choice
        options:
        - basic
        - full
        - extended

env:
  NODE_VERSION: '22'
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  security-updates:
    name: Apply Security Updates
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'security' || github.event.inputs.update_type == 'all' || github.event.inputs.update_type == '' }}
    outputs:
      security-updates-available: ${{ steps.check-security.outputs.updates-available }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --audit=false
        
      - name: Check for security updates
        id: check-security
        run: |
          echo "Checking for security vulnerabilities with fixes..."
          
          # Run npm audit to get security issues
          npm audit --json > audit-results.json || true
          
          # Extract fixable vulnerabilities
          FIXABLE_COUNT=$(cat audit-results.json | jq '.metadata.vulnerabilities.fixable // 0')
          
          if [ "$FIXABLE_COUNT" -gt 0 ]; then
            echo "updates-available=true" >> $GITHUB_OUTPUT
            echo "Found $FIXABLE_COUNT fixable security vulnerabilities"
            
            # Get details of fixable vulnerabilities
            cat audit-results.json | jq -r '.vulnerabilities | to_entries[] | select(.value.fixAvailable) | "\(.key): \(.value.severity) - Fix: \(.value.fixAvailable.name)@\(.value.fixAvailable.version)"' > fixable-vulns.txt
            
            echo "Fixable vulnerabilities:"
            cat fixable-vulns.txt
          else
            echo "updates-available=false" >> $GITHUB_OUTPUT
            echo "No fixable security vulnerabilities found"
          fi
          
      - name: Apply security fixes
        if: steps.check-security.outputs.updates-available == 'true'
        run: |
          echo "Applying security fixes..."
          
          # Create backup of current state
          cp package.json package.json.bak
          cp package-lock.json package-lock.json.bak
          
          # Apply security fixes
          npm audit fix --audit-level=moderate --force
          
          # Check if any changes were made
          if git diff --quiet package.json package-lock.json; then
            echo "No changes applied after audit fix"
            exit 0
          fi
          
          echo "Security fixes applied successfully"
          
      - name: Verify security fixes with Snyk
        if: steps.check-security.outputs.updates-available == 'true'
        run: |
          # Install and authenticate Snyk
          npm install -g snyk@latest
          snyk auth ${{ env.SNYK_TOKEN }}
          
          # Test for remaining vulnerabilities
          snyk test --severity-threshold=high --json > snyk-post-fix.json || true
          
          HIGH_VULNS=$(cat snyk-post-fix.json | jq '[.vulnerabilities[] | select(.severity=="high" or .severity=="critical")] | length')
          
          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "Warning: $HIGH_VULNS high/critical vulnerabilities remain after fixes"
            cat snyk-post-fix.json | jq -r '.vulnerabilities[] | select(.severity=="high" or .severity=="critical") | "\(.severity | ascii_upcase): \(.title) - \(.packageName)@\(.version)"' > remaining-vulns.txt
          else
            echo "All high/critical vulnerabilities resolved"
          fi
          
      - name: Run comprehensive tests
        if: steps.check-security.outputs.updates-available == 'true'
        run: |
          echo "Running comprehensive test suite..."
          
          # Type checking
          npm run type-check
          
          # Linting
          npm run lint
          
          # Unit tests with coverage
          npm run test:ci
          
          # Build verification
          npm run build
          
          # Bundle size check
          npm run size
          
          echo "All tests passed successfully"
          
      - name: Create security update PR
        if: steps.check-security.outputs.updates-available == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            security: automated security dependency updates
            
            - Applied npm audit fixes for security vulnerabilities
            - All tests pass after updates
            - Bundle size within limits
            
            Fixes: $(cat fixable-vulns.txt | wc -l) security vulnerabilities
          title: '🔒 Automated Security Dependency Updates'
          body: |
            ## 🔒 Automated Security Updates
            
            This PR contains automated security updates for vulnerable dependencies.
            
            ### 🐛 Security Fixes Applied
            ```
            $(cat fixable-vulns.txt)
            ```
            
            ### ✅ Verification Results
            - ✅ TypeScript compilation successful
            - ✅ All linting rules pass  
            - ✅ Unit tests pass with coverage
            - ✅ Production build successful
            - ✅ Bundle size within limits
            
            $(if [ -f remaining-vulns.txt ]; then echo "### ⚠️ Remaining High/Critical Vulnerabilities"; echo '```'; cat remaining-vulns.txt; echo '```'; echo "These require manual review and may need package replacement or code changes."; fi)
            
            ### 🤖 Automated Checks
            - **Test Coverage:** ${{ github.event.inputs.test_coverage || 'full' }}
            - **Update Type:** Security fixes only
            - **Review Required:** $(if [ -f remaining-vulns.txt ]; then echo "Yes - remaining vulnerabilities"; else echo "No - all vulnerabilities resolved"; fi)
            
            ---
            *This PR was automatically created by the Automated Dependency Updates workflow.*
          branch: automated-security-updates
          delete-branch: true
          labels: |
            security
            automated
            dependencies
            high-priority

  dependency-updates:
    name: Apply Dependency Updates
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type != 'security' && github.event.inputs.update_type != '' }}
    needs: [security-updates]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --audit=false
        
      - name: Check for dependency updates
        id: check-updates
        run: |
          # Install npm-check-updates
          npm install -g npm-check-updates@latest
          
          UPDATE_TYPE="${{ github.event.inputs.update_type }}"
          
          case $UPDATE_TYPE in
            "patch")
              ncu --target patch --jsonUpgraded > updates.json
              ;;
            "minor")
              ncu --target minor --jsonUpgraded > updates.json
              ;;
            "major")
              ncu --target latest --jsonUpgraded > updates.json
              ;;
            "all")
              ncu --target latest --jsonUpgraded > updates.json
              ;;
          esac
          
          # Check if updates are available
          UPDATE_COUNT=$(cat updates.json | jq 'length')
          
          if [ "$UPDATE_COUNT" -gt 0 ]; then
            echo "updates-available=true" >> $GITHUB_OUTPUT
            echo "Found $UPDATE_COUNT dependency updates"
            
            # Create human-readable update list
            cat updates.json | jq -r 'to_entries[] | "\(.key): \(.value)"' > update-list.txt
            echo "Available updates:"
            cat update-list.txt
          else
            echo "updates-available=false" >> $GITHUB_OUTPUT
            echo "No dependency updates available"
          fi
          
      - name: Apply dependency updates
        if: steps.check-updates.outputs.updates-available == 'true'
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type }}"
          
          # Create backup
          cp package.json package.json.bak
          cp package-lock.json package-lock.json.bak
          
          # Apply updates based on type
          case $UPDATE_TYPE in
            "patch")
              ncu --target patch -u
              ;;
            "minor") 
              ncu --target minor -u
              ;;
            "major"|"all")
              ncu --target latest -u
              ;;
          esac
          
          # Install updated dependencies
          npm install
          
      - name: Run safety tests
        if: steps.check-updates.outputs.updates-available == 'true'
        run: |
          TEST_COVERAGE="${{ github.event.inputs.test_coverage || 'full' }}"
          
          echo "Running safety tests with $TEST_COVERAGE coverage..."
          
          # Always run basic checks
          npm run type-check
          npm run lint
          npm run build
          
          case $TEST_COVERAGE in
            "basic")
              npm test -- --run --passWithNoTests
              ;;
            "full")
              npm run test:ci
              npm run size
              ;;
            "extended")
              npm run test:ci
              npm run size
              # Run E2E tests if available
              if command -v playwright &> /dev/null; then
                npm run test:e2e || echo "E2E tests failed but continuing"
              fi
              ;;
          esac
          
      - name: Security scan after updates
        if: steps.check-updates.outputs.updates-available == 'true'
        run: |
          # Run security scan on updated dependencies
          npm audit --audit-level=moderate || true
          
          # Run Snyk scan if token available
          if [ -n "${{ env.SNYK_TOKEN }}" ]; then
            npm install -g snyk@latest
            snyk auth ${{ env.SNYK_TOKEN }}
            snyk test --severity-threshold=high || echo "Snyk scan completed with issues"
          fi
          
      - name: Generate update impact analysis
        if: steps.check-updates.outputs.updates-available == 'true'
        run: |
          cat > update-impact.md << 'EOF'
          # Dependency Update Impact Analysis
          
          ## Updates Applied
          ```
          $(cat update-list.txt)
          ```
          
          ## Bundle Size Impact
          $(npm run size 2>&1 | tail -n 20 || echo "Bundle size analysis not available")
          
          ## Breaking Changes
          $(ncu --target latest --errorLevel 2 2>&1 | grep -A 20 "major" || echo "No major updates detected")
          
          ## Security Impact
          $(npm audit --audit-level=moderate 2>&1 | head -n 20 || echo "No security issues detected")
          EOF
          
      - name: Create dependency update PR
        if: steps.check-updates.outputs.updates-available == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            deps: automated ${{ github.event.inputs.update_type }} dependency updates
            
            - Applied ${{ github.event.inputs.update_type }} updates for $(cat update-list.txt | wc -l) packages
            - All safety tests pass
            - Bundle size verified
          title: '📦 Automated ${{ github.event.inputs.update_type | title }} Dependency Updates'
          body: |
            ## 📦 Automated Dependency Updates
            
            **Update Type:** ${{ github.event.inputs.update_type | title }}
            **Test Coverage:** ${{ github.event.inputs.test_coverage || 'full' }}
            
            ### 📈 Updates Applied
            ```
            $(cat update-list.txt)
            ```
            
            ### ✅ Safety Verification
            - ✅ TypeScript compilation successful
            - ✅ Linting passes
            - ✅ Production build successful
            - ✅ Tests pass$(if [ "${{ github.event.inputs.test_coverage }}" = "extended" ]; then echo " (including E2E)"; fi)
            - ✅ Bundle size within limits
            - ✅ Security scan clean
            
            ### 📊 Impact Analysis
            $(cat update-impact.md)
            
            ### 🔍 Review Checklist
            - [ ] Verify no breaking changes in updated packages
            - [ ] Test critical user flows manually
            - [ ] Check for any new deprecation warnings
            - [ ] Validate performance impact
            
            ---
            *This PR was automatically created by the Automated Dependency Updates workflow.*
            
            To customize future updates, modify the workflow inputs or schedule.
          branch: automated-dependency-updates-${{ github.event.inputs.update_type }}
          delete-branch: true
          labels: |
            dependencies
            automated
            ${{ github.event.inputs.update_type }}

  update-summary:
    name: Update Summary
    runs-on: ubuntu-latest
    needs: [security-updates, dependency-updates]
    if: always()
    
    steps:
      - name: Create update summary
        run: |
          cat > update-summary.md << 'EOF'
          # Automated Dependency Update Summary
          
          **Date:** $(date)
          **Triggered by:** ${{ github.event_name }}
          
          ## Results
          - **Security Updates:** ${{ needs.security-updates.outputs.security-updates-available || 'N/A' }}
          - **Dependency Updates:** ${{ github.event.inputs.update_type || 'security-only' }}
          
          ## PRs Created
          Check the repository for automatically created pull requests with dependency updates.
          
          ## Next Steps
          1. Review and test the created PRs
          2. Merge approved updates
          3. Monitor for any issues after deployment
          
          ## Schedule
          This workflow runs automatically twice weekly (Monday and Thursday at 3 AM UTC).
          Manual runs can be triggered with custom parameters.
          EOF
          
          echo "Update summary generated"
          cat update-summary.md
          
      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: update-summary
          path: update-summary.md
          retention-days: 30