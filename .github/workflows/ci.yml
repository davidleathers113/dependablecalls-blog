name: DCE Platform CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22.15.0'

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🏗️ Type check
        run: npm run type-check

      - name: 🧪 Run unit tests
        run: npm run test:ci

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info

  e2e:
    runs-on: ubuntu-latest
    name: 🎭 E2E Tests

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🏗️ Build application
        run: npm run build

      - name: 🎭 Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: 📸 Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 7

  build:
    runs-on: ubuntu-latest
    name: 🏗️ Build
    needs: [test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_STRIPE_PUBLIC_KEY: ${{ secrets.VITE_STRIPE_PUBLIC_KEY }}

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  security:
    runs-on: ubuntu-latest
    name: 🔒 Security Testing

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run security tests
        run: npm run test:security
        env:
          SECURITY_TEST_ENV: ci

      - name: 🔍 Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: 🔒 Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript
          queries: security-extended,security-and-quality
          config-file: ./.github/codeql/codeql-config.yml

      - name: 🔒 Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: 📊 Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-reports
          path: |
            test-results/security/
            coverage/security/
          retention-days: 7

  security-scan-staging:
    runs-on: ubuntu-latest
    name: 🕷️ OWASP ZAP Scan (Staging)
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🕷️ Run ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://staging.dependablecalls.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          
      - name: 🕷️ Run ZAP full scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'https://staging.dependablecalls.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j'

      - name: 📊 Upload ZAP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-scan-results
          path: |
            report_html.html
            report_json.json
            report_md.md
          retention-days: 7

  deploy-staging:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Staging
    needs: [test, e2e, build, security]
    if: github.ref == 'refs/heads/develop'

    environment:
      name: staging
      url: https://staging.dependablecalls.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 🚀 Deploy to Netlify Staging
        uses: nwtgck/actions-netlify@v3
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy from GitHub Actions - ${{ github.sha }}'
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}

  security-scan-production:
    runs-on: ubuntu-latest
    name: 🕷️ OWASP ZAP Scan (Production)
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🕷️ Run ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://dependablecalls.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          
      - name: 📊 Upload ZAP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-production-scan-results
          path: |
            report_html.html
            report_json.json
            report_md.md
          retention-days: 30

  deploy-production:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Production
    needs: [test, e2e, build, security]
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://dependablecalls.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 🚀 Deploy to Netlify Production
        uses: nwtgck/actions-netlify@v3
        with:
          publish-dir: './dist'
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Production deployment - ${{ github.sha }}'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PRODUCTION_SITE_ID }}

      - name: 📊 Notify Sentry of release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: dce-platform
        with:
          environment: production
          version: ${{ github.sha }}

  lighthouse:
    runs-on: ubuntu-latest
    name: 🔍 Lighthouse Audit
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  database-migrations:
    runs-on: ubuntu-latest
    name: 🗄️ Database Migrations
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: 🗄️ Run database migrations
        run: supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: 🔄 Generate database types
        run: |
          supabase gen types typescript --project-id ${{ secrets.SUPABASE_PROJECT_ID }} > src/types/database.ts
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add src/types/database.ts
          git diff --staged --quiet || git commit -m "Update database types [skip ci]"
          git push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  penetration-test:
    runs-on: ubuntu-latest
    name: 🎯 Penetration Testing
    needs: [security-scan-staging]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎯 Run penetration tests
        run: npm run test:pentest
        env:
          TARGET_URL: https://staging.dependablecalls.com
          PENTEST_API_KEY: ${{ secrets.PENTEST_API_KEY }}

      - name: 📊 Upload penetration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: penetration-test-results
          path: test-results/pentest/
          retention-days: 30

  performance:
    runs-on: ubuntu-latest
    name: ⚡ Performance Tests
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Run performance tests
        run: |
          npx artillery run performance/load-test.yml --target https://staging.dependablecalls.com
          npx artillery run performance/stress-test.yml --target https://staging.dependablecalls.com

  security-report:
    runs-on: ubuntu-latest
    name: 📊 Security Report
    needs: [security, security-scan-staging, security-scan-production]
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📊 Generate security report
        run: npm run security:report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/security/
          retention-days: 90

      - name: 📢 Post security summary to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summaryPath = 'reports/security/summary.md';
            if (fs.existsSync(summaryPath)) {
              const summary = fs.readFileSync(summaryPath, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔒 Security Test Summary\n\n${summary}`
              });
            }

  notification:
    runs-on: ubuntu-latest
    name: 📢 Notifications
    needs: [deploy-production, security-report]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: 📢 Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
