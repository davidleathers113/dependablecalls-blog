-- =====================================================
-- Blog CMS Seed Data for Development (Updated with Sanitization)
-- =====================================================
-- This file contains sample data for testing the blog CMS
-- with proper content sanitization
-- Run after migration 019: psql $DATABASE_URL -f seed_blog_updated.sql
-- =====================================================

-- Create test users if they don't exist
DO $$
DECLARE
  admin_user_id UUID;
  author1_id UUID;
  author2_id UUID;
  test_user_id UUID;
BEGIN
  -- Create admin user
  INSERT INTO users (id, email, name, role)
  VALUES ('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'admin@dependablecalls.com', 'Admin User', 'admin')
  ON CONFLICT (id) DO NOTHING;
  
  admin_user_id := 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';
  
  -- Create author users
  INSERT INTO users (id, email, name, role)
  VALUES 
    ('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12', 'john@dependablecalls.com', 'John Doe', 'supplier'),
    ('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a13', 'jane@dependablecalls.com', 'Jane Smith', 'supplier'),
    ('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a14', 'testuser@example.com', 'Test User', 'supplier')
  ON CONFLICT (id) DO NOTHING;
  
  author1_id := 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12';
  author2_id := 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a13';
  test_user_id := 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a14';
  
  -- Create admin record
  INSERT INTO admins (user_id, created_at)
  VALUES (admin_user_id, NOW())
  ON CONFLICT (user_id) DO NOTHING;
END $$;

-- Create blog authors
INSERT INTO blog_authors (id, user_id, display_name, bio, avatar_url, social_links)
VALUES 
  (
    'b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11',
    'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11',
    'Admin Team',
    'The Dependable Calls admin team manages platform updates and announcements.',
    'https://ui-avatars.com/api/?name=Admin+Team&background=3B82F6&color=fff',
    '{"twitter": "@dependablecalls", "linkedin": "dependablecalls"}'::jsonb
  ),
  (
    'b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12',
    'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12',
    'John Doe',
    'John is a pay-per-call expert with over 10 years of experience in affiliate marketing.',
    'https://ui-avatars.com/api/?name=John+Doe&background=10B981&color=fff',
    '{"twitter": "@johndoe", "linkedin": "john-doe"}'::jsonb
  ),
  (
    'b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a13',
    'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a13',
    'Jane Smith',
    'Jane specializes in lead generation strategies and conversion optimization.',
    'https://ui-avatars.com/api/?name=Jane+Smith&background=F59E0B&color=fff',
    '{"twitter": "@janesmith", "linkedin": "jane-smith"}'::jsonb
  )
ON CONFLICT (id) DO NOTHING;

-- Clear existing posts for clean seed
DELETE FROM blog_post_tags WHERE post_id IN (
  SELECT id FROM blog_posts WHERE id LIKE 'c0eebc99-9c0b-4ef8-bb6d-6bb9bd380a%'
);
DELETE FROM blog_post_categories WHERE post_id IN (
  SELECT id FROM blog_posts WHERE id LIKE 'c0eebc99-9c0b-4ef8-bb6d-6bb9bd380a%'
);
DELETE FROM blog_comments WHERE post_id IN (
  SELECT id FROM blog_posts WHERE id LIKE 'c0eebc99-9c0b-4ef8-bb6d-6bb9bd380a%'
);
DELETE FROM blog_posts WHERE id LIKE 'c0eebc99-9c0b-4ef8-bb6d-6bb9bd380a%';

-- Create sample blog posts
-- Note: content_sanitized will be automatically populated by triggers
INSERT INTO blog_posts (
  id, slug, title, subtitle, content, excerpt, featured_image_url,
  author_id, status, published_at, metadata, view_count
)
VALUES 
  (
    'c0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11',
    'welcome-to-dependable-calls-blog',
    'Welcome to the Dependable Calls Blog',
    'Your source for pay-per-call insights and platform updates',
    E'# Welcome to Dependable Calls\n\nWe''re excited to launch our new blog where we''ll share:\n\n## Platform Updates\nStay informed about new features, improvements, and system updates.\n\n## Industry Insights\nLearn from our analysis of pay-per-call trends and best practices.\n\n## Success Stories\nDiscover how our users are achieving success with Dependable Calls.\n\n## Tutorials & Guides\nStep-by-step instructions to help you maximize your results.\n\n### What is Pay-Per-Call?\n\nPay-per-call is a performance marketing model where advertisers pay for qualified phone calls generated by publishers. It''s particularly effective for industries where customers prefer phone conversations:\n\n- **Home Services**: Plumbing, HVAC, roofing\n- **Legal Services**: Personal injury, bankruptcy, criminal defense\n- **Insurance**: Auto, home, life insurance quotes\n- **Healthcare**: Dental, medical procedures, rehabilitation\n\n### Why Dependable Calls?\n\nOur platform provides:\n\n1. **Real-time Tracking**: Monitor your calls as they happen\n2. **Advanced Fraud Detection**: Protect your campaigns from invalid traffic\n3. **Flexible Routing**: Send calls to the right buyers at the right time\n4. **Detailed Analytics**: Make data-driven decisions\n5. **Reliable Payments**: Get paid on time, every time\n\n### Getting Started\n\nReady to start? Here''s how:\n\n1. Sign up for an account\n2. Set up your first campaign\n3. Configure call tracking numbers\n4. Start receiving calls\n5. Track performance in real-time\n\nWe''re here to help you succeed. Check back regularly for new content!',
    'Welcome to the Dependable Calls blog - your source for pay-per-call insights, platform updates, and success stories.',
    'https://images.unsplash.com/photo-1522542550221-31fd19575a2d?w=1600&h=900&fit=crop',
    'b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11',
    'published',
    NOW() - INTERVAL '7 days',
    '{"seo_title": "Welcome to Dependable Calls Blog | Pay-Per-Call Platform", "seo_description": "Discover pay-per-call insights, platform updates, and success stories on the Dependable Calls blog."}'::jsonb,
    156
  ),
  (
    'c0eebc99-9c0b-4ef8-bb6d-6bb9bd380a17',
    'xss-test-post',
    'Testing XSS Prevention',
    'This post tests our content sanitization',
    E'# XSS Test Post\n\nThis post contains various XSS attempts that should be sanitized:\n\n<script>alert("XSS")</script>\n\n<img src=x onerror=alert("XSS")>\n\n<svg onload=alert("XSS")>\n\nNormal content with a [link](javascript:alert("XSS")) that should be sanitized.\n\n<iframe src="javascript:alert(\'XSS\')"></iframe>\n\n## Safe Content\n\nThis paragraph is safe and should remain intact.\n\n- List item 1\n- List item 2 with **bold** and *italic*\n- List item 3\n\n### Code Example\n\n```javascript\n// This code block should be preserved\nfunction safeFunction() {\n  console.log("This is safe code");\n}\n```\n\n<style>body{background:url("javascript:alert(\'XSS\')")}</style>\n\nEnd of test content.',
    'A test post to verify XSS prevention and content sanitization.',
    NULL,
    'b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11',
    'draft',
    NULL,
    '{"internal_note": "XSS test post - should not be published"}'::jsonb,
    0
  );

-- Link posts to categories
INSERT INTO blog_post_categories (post_id, category_id)
SELECT 
  p.id as post_id,
  c.id as category_id
FROM blog_posts p
CROSS JOIN blog_categories c
WHERE 
  (p.slug = 'welcome-to-dependable-calls-blog' AND c.slug = 'announcements');

-- Link posts to tags
INSERT INTO blog_post_tags (post_id, tag_id)
SELECT 
  p.id as post_id,
  t.id as tag_id
FROM blog_posts p
CROSS JOIN blog_tags t
WHERE 
  (p.slug = 'welcome-to-dependable-calls-blog' AND t.slug IN ('announcements', 'getting-started'));

-- Add test comments with XSS attempts
INSERT INTO blog_comments (
  post_id, user_id, content, status
)
VALUES
  (
    (SELECT id FROM blog_posts WHERE slug = 'welcome-to-dependable-calls-blog'),
    'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a14',
    'Great article! This really helped me understand the basics.',
    'approved'
  ),
  (
    (SELECT id FROM blog_posts WHERE slug = 'welcome-to-dependable-calls-blog'),
    'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a14',
    'Test comment with <script>alert("XSS")</script> attempt.',
    'pending'
  ),
  (
    (SELECT id FROM blog_posts WHERE slug = 'welcome-to-dependable-calls-blog'),
    'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a14',
    'Another test with <img src=x onerror=alert("XSS")> and <a href="javascript:void(0)">link</a>.',
    'pending'
  );

-- Manually trigger sanitization for existing content if needed
-- This would normally happen automatically via triggers
DO $$
DECLARE
  post_record RECORD;
  comment_record RECORD;
BEGIN
  -- Force re-sanitization of posts without sanitized content
  FOR post_record IN 
    SELECT id FROM blog_posts 
    WHERE content IS NOT NULL AND content_sanitized IS NULL
  LOOP
    UPDATE blog_posts 
    SET content = content -- This triggers the sanitization
    WHERE id = post_record.id;
  END LOOP;

  -- Force re-sanitization of comments without sanitized content
  FOR comment_record IN 
    SELECT id FROM blog_comments 
    WHERE content IS NOT NULL AND content_sanitized IS NULL
  LOOP
    UPDATE blog_comments 
    SET content = content -- This triggers the sanitization
    WHERE id = comment_record.id;
  END LOOP;
END $$;

-- Verify sanitization worked
DO $$
DECLARE
  unsanitized_count INTEGER;
BEGIN
  SELECT COUNT(*) INTO unsanitized_count
  FROM blog_posts
  WHERE content IS NOT NULL AND content_sanitized IS NULL;
  
  IF unsanitized_count > 0 THEN
    RAISE WARNING 'Found % blog posts without sanitized content', unsanitized_count;
  END IF;
  
  SELECT COUNT(*) INTO unsanitized_count
  FROM blog_comments
  WHERE content IS NOT NULL AND content_sanitized IS NULL;
  
  IF unsanitized_count > 0 THEN
    RAISE WARNING 'Found % blog comments without sanitized content', unsanitized_count;
  END IF;
END $$;

-- Display sanitization status
SELECT 
  'Blog Posts' as content_type,
  COUNT(*) as total,
  COUNT(*) FILTER (WHERE content_sanitized IS NOT NULL) as sanitized,
  COUNT(*) FILTER (WHERE content IS NOT NULL AND content_sanitized IS NULL) as unsanitized
FROM blog_posts
UNION ALL
SELECT 
  'Blog Comments' as content_type,
  COUNT(*) as total,
  COUNT(*) FILTER (WHERE content_sanitized IS NOT NULL) as sanitized,
  COUNT(*) FILTER (WHERE content IS NOT NULL AND content_sanitized IS NULL) as unsanitized
FROM blog_comments;