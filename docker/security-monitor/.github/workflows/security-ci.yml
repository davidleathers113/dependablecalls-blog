name: Security Monitor CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_NAME: security-monitor

jobs:
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-v2.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements-v2.txt

      - name: Run ruff linting
        run: |
          ruff check container_monitor/ src/ --output-format=github

      - name: Run mypy type checking
        run: |
          mypy container_monitor/ src/ --ignore-missing-imports

      - name: Check code formatting
        run: |
          black --check --diff container_monitor/ src/ tests/

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit pip-audit cyclonedx-bom

      - name: Run dependency vulnerability scan
        run: |
          safety check --requirements requirements-v2.txt --json --output safety-results.json
          pip-audit --requirement requirements-v2.txt --format json --output pip-audit-results.json
        continue-on-error: true

      - name: Run static security analysis
        run: |
          bandit -r container_monitor/ src/ -f json -o bandit-results.json
        continue-on-error: true

      - name: Generate SBOM
        run: |
          cyclonedx-py requirements \
            --input-file requirements-v2.txt \
            --output-file sbom.json \
            --output-format json

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            safety-results.json
            pip-audit-results.json
            bandit-results.json
            sbom.json

      - name: Upload SBOM to dependency graph
        uses: advanced-security/spdx-dependency-submission-action@v0.0.1
        with:
          filePath: sbom.json

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements-v2.txt

      - name: Run tests with coverage
        run: |
          pytest tests/ \
            --cov=container_monitor \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --junit-xml=test-results.xml \
            --cov-fail-under=85 \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            htmlcov/

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:test
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-v2.txt

      - name: Start test containers
        run: |
          # Start test containers for integration testing
          docker run -d --name test-nginx nginx:alpine
          docker run -d --name test-redis redis:alpine

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short
        env:
          DOCKER_HOST: unix:///var/run/docker.sock

      - name: Cleanup test containers
        if: always()
        run: |
          docker rm -f test-nginx test-redis || true

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-v2.txt
          pip install memray

      - name: Run performance benchmarks
        run: |
          python tests/benchmarks/run_benchmarks.py
          
      - name: Memory profiling
        run: |
          timeout 30s python -m memray run -o profile.bin -m container_monitor.core.monitor || true
          memray flamegraph profile.bin --output flamegraph.html

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            benchmarks-results.json
            flamegraph.html

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, test, container-security, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate release notes
        id: release_notes
        run: |
          echo "## Security Monitor v2.0 Release" > release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          git log --oneline $(git describe --tags --abbrev=0)..HEAD >> release_notes.md

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Security Monitor v2.0.${{ github.run_number }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, test, container-security]
    if: always()
    steps:
      - name: Notify on failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "ðŸš¨ Security Monitor CI/CD pipeline failed!"
          echo "Check the failed jobs for details."

      - name: Notify on success
        if: ${{ !contains(needs.*.result, 'failure') }}
        run: |
          echo "âœ… Security Monitor CI/CD pipeline completed successfully!"