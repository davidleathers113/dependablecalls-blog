#!/bin/bash
# Comprehensive CVE and Security Vulnerability Scanner
#
# This script performs multi-layered security scanning:
# - Python dependency vulnerabilities
# - Static code analysis for security issues
# - Container image vulnerabilities (if available)
# - Configuration security assessment

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
SCAN_DIR="$PROJECT_ROOT/security-scans"
TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
EXIT_CODE=0

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[CVE-SCAN]${NC} $*"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $*" >&2
}

error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

# Create scan directory
mkdir -p "$SCAN_DIR"/{reports,summaries}

log "Starting comprehensive security vulnerability scan"
log "Scan directory: $SCAN_DIR"

# 1. Python Dependency Vulnerability Scan
log "üîç Scanning Python dependencies for vulnerabilities..."

cd "$PROJECT_ROOT"

# Safety scan
if command -v safety >/dev/null 2>&1; then
    info "Running Safety dependency scan..."
    SAFETY_OUTPUT="$SCAN_DIR/reports/safety-${TIMESTAMP}.json"
    
    if safety check \
        --requirements requirements-v2.txt \
        --json \
        --output "$SAFETY_OUTPUT" \
        --continue-on-error; then
        log "‚úÖ Safety scan completed successfully"
    else
        warn "‚ö†Ô∏è  Safety scan found vulnerabilities"
        EXIT_CODE=1
    fi
else
    error "Safety not installed. Run: pip install safety"
    EXIT_CODE=1
fi

# pip-audit scan
if command -v pip-audit >/dev/null 2>&1; then
    info "Running pip-audit scan..."
    PIP_AUDIT_OUTPUT="$SCAN_DIR/reports/pip-audit-${TIMESTAMP}.json"
    
    if pip-audit \
        --requirement requirements-v2.txt \
        --format json \
        --output "$PIP_AUDIT_OUTPUT" \
        --progress-spinner=off; then
        log "‚úÖ pip-audit scan completed successfully"
    else
        warn "‚ö†Ô∏è  pip-audit found vulnerabilities"
        EXIT_CODE=1
    fi
else
    error "pip-audit not installed. Run: pip install pip-audit"
    EXIT_CODE=1
fi

# 2. Static Security Analysis
log "üîí Running static security analysis..."

# Bandit - Python security analysis
if command -v bandit >/dev/null 2>&1; then
    info "Running Bandit security analysis..."
    BANDIT_OUTPUT="$SCAN_DIR/reports/bandit-${TIMESTAMP}.json"
    
    if bandit -r container_monitor/ src/ \
        -f json \
        -o "$BANDIT_OUTPUT" \
        --severity-level medium \
        --confidence-level medium \
        --exclude "*/tests/*,*/test_*"; then
        log "‚úÖ Bandit scan completed successfully"
    else
        warn "‚ö†Ô∏è  Bandit found security issues"
        EXIT_CODE=1
    fi
else
    error "Bandit not installed. Run: pip install bandit"
    EXIT_CODE=1
fi

# 3. Configuration Security Assessment
log "‚öôÔ∏è  Assessing configuration security..."

CONFIG_ASSESSMENT="$SCAN_DIR/reports/config-assessment-${TIMESTAMP}.json"

# Check for hardcoded secrets, insecure configurations
python3 << EOF > "$CONFIG_ASSESSMENT"
import json
import os
import re
from pathlib import Path

def scan_config_security():
    issues = []
    project_root = Path("$PROJECT_ROOT")
    
    # Patterns for potential security issues
    secret_patterns = [
        (r'password\s*=\s*["\']([^"\']+)["\']', 'Hardcoded password'),
        (r'api[_-]?key\s*=\s*["\']([^"\']+)["\']', 'API key in config'),
        (r'secret[_-]?key\s*=\s*["\']([^"\']+)["\']', 'Secret key in config'),
        (r'token\s*=\s*["\']([^"\']+)["\']', 'Token in config'),
    ]
    
    # Scan configuration files
    config_files = list(project_root.glob("**/*.yaml")) + \
                   list(project_root.glob("**/*.yml")) + \
                   list(project_root.glob("**/*.json")) + \
                   list(project_root.glob("**/.env*"))
    
    for config_file in config_files:
        if 'node_modules' in str(config_file) or '.git' in str(config_file):
            continue
            
        try:
            content = config_file.read_text()
            
            for pattern, description in secret_patterns:
                matches = re.findall(pattern, content, re.IGNORECASE)
                for match in matches:
                    issues.append({
                        'file': str(config_file.relative_to(project_root)),
                        'issue': description,
                        'severity': 'HIGH',
                        'line_content': match[:20] + '...' if len(match) > 20 else match
                    })
        except Exception as e:
            continue
    
    # Check Docker configuration
    dockerfile_path = project_root / "Dockerfile"
    if dockerfile_path.exists():
        content = dockerfile_path.read_text()
        
        # Check for security best practices
        if 'USER root' in content or 'USER 0' in content:
            issues.append({
                'file': 'Dockerfile',
                'issue': 'Container runs as root user',
                'severity': 'HIGH',
                'recommendation': 'Use non-root user for container execution'
            })
        
        if '--privileged' in content:
            issues.append({
                'file': 'Dockerfile',
                'issue': 'Privileged container configuration',
                'severity': 'CRITICAL',
                'recommendation': 'Remove privileged mode unless absolutely necessary'
            })
    
    return {
        'timestamp': '$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")',
        'total_issues': len(issues),
        'issues': issues,
        'files_scanned': len(config_files),
        'status': 'PASS' if len(issues) == 0 else 'FAIL'
    }

result = scan_config_security()
print(json.dumps(result, indent=2))
EOF

if [[ -f "$CONFIG_ASSESSMENT" ]]; then
    ISSUES_COUNT=$(python3 -c "import json; data=json.load(open('$CONFIG_ASSESSMENT')); print(data['total_issues'])")
    if [[ "$ISSUES_COUNT" -gt 0 ]]; then
        warn "‚ö†Ô∏è  Configuration assessment found $ISSUES_COUNT security issues"
        EXIT_CODE=1
    else
        log "‚úÖ Configuration security assessment passed"
    fi
fi

# 4. Container Image Vulnerability Scan (if available)
if command -v docker >/dev/null 2>&1 && [[ -f "$PROJECT_ROOT/Dockerfile" ]]; then
    log "üê≥ Scanning container image for vulnerabilities..."
    
    # Check if we have built images
    IMAGE_NAME="security-monitor:latest"
    
    if docker images | grep -q "security-monitor"; then
        # Use trivy if available
        if command -v trivy >/dev/null 2>&1; then
            info "Running Trivy container scan..."
            TRIVY_OUTPUT="$SCAN_DIR/reports/trivy-${TIMESTAMP}.json"
            
            if trivy image \
                --format json \
                --output "$TRIVY_OUTPUT" \
                "$IMAGE_NAME"; then
                log "‚úÖ Container image scan completed"
            else
                warn "‚ö†Ô∏è  Container image scan found vulnerabilities"
                EXIT_CODE=1
            fi
        else
            warn "Trivy not available for container scanning"
        fi
    else
        info "No built container images found, skipping container scan"
    fi
fi

# 5. Generate Comprehensive Summary Report
log "üìä Generating security scan summary..."

SUMMARY_FILE="$SCAN_DIR/summaries/security-summary-${TIMESTAMP}.json"

python3 << EOF > "$SUMMARY_FILE"
import json
import os
from pathlib import Path
from datetime import datetime

def generate_summary():
    scan_dir = Path("$SCAN_DIR/reports")
    summary = {
        'scan_metadata': {
            'timestamp': '$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")',
            'scan_id': '$TIMESTAMP',
            'project': 'container-security-monitor',
            'version': '2.0.0'
        },
        'scan_results': {},
        'overall_status': 'PASS',
        'total_vulnerabilities': 0,
        'critical_issues': 0,
        'high_issues': 0,
        'medium_issues': 0,
        'low_issues': 0
    }
    
    # Process Safety results
    safety_file = scan_dir / 'safety-${TIMESTAMP}.json'
    if safety_file.exists():
        try:
            with open(safety_file) as f:
                safety_data = json.load(f)
            summary['scan_results']['safety'] = {
                'status': 'COMPLETED',
                'vulnerabilities_found': len(safety_data.get('vulnerabilities', []))
            }
            summary['total_vulnerabilities'] += len(safety_data.get('vulnerabilities', []))
        except:
            summary['scan_results']['safety'] = {'status': 'ERROR'}
    
    # Process pip-audit results  
    pip_audit_file = scan_dir / 'pip-audit-${TIMESTAMP}.json'
    if pip_audit_file.exists():
        try:
            with open(pip_audit_file) as f:
                pip_data = json.load(f)
            vuln_count = len(pip_data.get('vulnerabilities', []))
            summary['scan_results']['pip_audit'] = {
                'status': 'COMPLETED',
                'vulnerabilities_found': vuln_count
            }
            summary['total_vulnerabilities'] += vuln_count
        except:
            summary['scan_results']['pip_audit'] = {'status': 'ERROR'}
    
    # Process Bandit results
    bandit_file = scan_dir / 'bandit-${TIMESTAMP}.json'
    if bandit_file.exists():
        try:
            with open(bandit_file) as f:
                bandit_data = json.load(f)
            
            metrics = bandit_data.get('metrics', {}).get('_totals', {})
            high_issues = metrics.get('SEVERITY.HIGH', 0) 
            medium_issues = metrics.get('SEVERITY.MEDIUM', 0)
            low_issues = metrics.get('SEVERITY.LOW', 0)
            
            summary['scan_results']['bandit'] = {
                'status': 'COMPLETED',
                'total_issues': high_issues + medium_issues + low_issues,
                'high_severity': high_issues,
                'medium_severity': medium_issues,
                'low_severity': low_issues
            }
            
            summary['high_issues'] += high_issues
            summary['medium_issues'] += medium_issues
            summary['low_issues'] += low_issues
            
        except:
            summary['scan_results']['bandit'] = {'status': 'ERROR'}
    
    # Process config assessment
    config_file = scan_dir / 'config-assessment-${TIMESTAMP}.json'
    if config_file.exists():
        try:
            with open(config_file) as f:
                config_data = json.load(f)
            summary['scan_results']['config_security'] = {
                'status': config_data.get('status', 'UNKNOWN'),
                'issues_found': config_data.get('total_issues', 0)
            }
            summary['total_vulnerabilities'] += config_data.get('total_issues', 0)
        except:
            summary['scan_results']['config_security'] = {'status': 'ERROR'}
    
    # Determine overall status
    if (summary['total_vulnerabilities'] > 0 or 
        summary['critical_issues'] > 0 or 
        summary['high_issues'] > 0):
        summary['overall_status'] = 'FAIL'
    
    # Add recommendations
    summary['recommendations'] = []
    if summary['total_vulnerabilities'] > 0:
        summary['recommendations'].append('Update vulnerable dependencies to patched versions')
    if summary['high_issues'] > 0:
        summary['recommendations'].append('Address high-severity security issues immediately')
    if summary['scan_results'].get('config_security', {}).get('issues_found', 0) > 0:
        summary['recommendations'].append('Review and fix configuration security issues')
    
    return summary

result = generate_summary()
print(json.dumps(result, indent=2))
EOF

# Display Results
echo
log "üéØ Security Scan Results Summary"
echo "=================================="

if [[ -f "$SUMMARY_FILE" ]]; then
    python3 << EOF
import json

with open('$SUMMARY_FILE') as f:
    data = json.load(f)

status = data['overall_status']
color = '\033[0;32m' if status == 'PASS' else '\033[0;31m'
print(f"{color}Overall Status: {status}\033[0m")
print(f"Total Vulnerabilities: {data['total_vulnerabilities']}")
print(f"Critical Issues: {data['critical_issues']}")
print(f"High Issues: {data['high_issues']}")
print(f"Medium Issues: {data['medium_issues']}")

print("\nScan Results:")
for scan_type, result in data['scan_results'].items():
    status_color = '\033[0;32m' if result['status'] == 'COMPLETED' else '\033[0;31m'
    print(f"  ‚Ä¢ {scan_type.title()}: {status_color}{result['status']}\033[0m")

if data['recommendations']:
    print("\nRecommendations:")
    for i, rec in enumerate(data['recommendations'], 1):
        print(f"  {i}. {rec}")
EOF
else
    error "Failed to generate summary report"
    EXIT_CODE=1
fi

echo
log "Scan artifacts saved to: $SCAN_DIR"
log "Summary report: $(basename "$SUMMARY_FILE")"

if [[ $EXIT_CODE -eq 0 ]]; then
    log "‚úÖ Security scan completed successfully - No critical issues found"
else
    error "‚ùå Security scan completed with issues - Review reports for details"
fi

exit $EXIT_CODE