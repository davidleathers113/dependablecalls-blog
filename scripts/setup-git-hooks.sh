#!/bin/bash

# DCE Platform - Git Hooks Setup Script
# Sets up pre-commit hooks for secret scanning
# Phase 4.9: Secret Management Implementation

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔗 DCE Platform Git Hooks Setup${NC}"
echo -e "${BLUE}================================${NC}\n"

# Check if we're in a git repository
if [ ! -d ".git" ]; then
    echo -e "${RED}❌ Not in a git repository. Please run from the project root.${NC}"
    exit 1
fi

# Check if pre-commit script exists
if [ ! -f "scripts/pre-commit-secret-scan.js" ]; then
    echo -e "${RED}❌ Pre-commit script not found. Please ensure scripts/pre-commit-secret-scan.js exists.${NC}"
    exit 1
fi

# Create hooks directory if it doesn't exist
mkdir -p .git/hooks

echo -e "${YELLOW}📋 Setting up git hooks...${NC}"

# Backup existing pre-commit hook if it exists
if [ -f ".git/hooks/pre-commit" ]; then
    echo -e "${YELLOW}⚠️  Existing pre-commit hook found. Creating backup...${NC}"
    cp .git/hooks/pre-commit .git/hooks/pre-commit.backup.$(date +%Y%m%d_%H%M%S)
    echo -e "${GREEN}✅ Backup created${NC}"
fi

# Create the pre-commit hook
cat > .git/hooks/pre-commit << 'EOF'
#!/bin/bash

# DCE Platform Pre-Commit Hook
# Prevents secrets from being committed to version control
# Auto-generated by setup-git-hooks.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to check if Node.js is available
check_node() {
    if ! command -v node &> /dev/null; then
        echo -e "${RED}❌ Node.js is not installed or not in PATH${NC}"
        echo -e "${YELLOW}Please install Node.js to run secret scanning${NC}"
        echo -e "${YELLOW}To bypass (NOT RECOMMENDED): git commit --no-verify${NC}"
        exit 1
    fi
}

# Function to check if we're in the correct directory
check_directory() {
    if [ ! -f "package.json" ] || [ ! -f "scripts/pre-commit-secret-scan.js" ]; then
        echo -e "${RED}❌ Pre-commit hook not running from project root${NC}"
        echo -e "${YELLOW}Please ensure you're committing from the DCE project root${NC}"
        exit 1
    fi
}

# Main execution
main() {
    echo -e "${BLUE}🔐 DCE Platform - Pre-Commit Security Check${NC}"
    echo -e "${BLUE}===========================================${NC}"
    
    # Check prerequisites
    check_node
    check_directory
    
    # Run the secret scanner
    echo -e "${YELLOW}🔍 Scanning for secrets in staged files...${NC}"
    
    if node scripts/pre-commit-secret-scan.js; then
        echo -e "${GREEN}✅ Pre-commit security check passed${NC}"
        echo -e "${GREEN}🚀 Commit is safe to proceed${NC}"
        exit 0
    else
        echo -e "${RED}❌ Pre-commit security check failed${NC}"
        echo -e "${RED}🛡️  Commit blocked for security reasons${NC}"
        echo -e "${YELLOW}To bypass (NOT RECOMMENDED): git commit --no-verify${NC}"
        exit 1
    fi
}

# Handle interruption gracefully
trap 'echo -e "\n${YELLOW}⚠️  Pre-commit check interrupted${NC}"; exit 1' INT

# Run main function
main "$@"
EOF

# Make the hook executable
chmod +x .git/hooks/pre-commit

echo -e "${GREEN}✅ Pre-commit hook installed successfully${NC}"

# Create pre-push hook for additional security
echo -e "${YELLOW}📋 Setting up pre-push hook...${NC}"

cat > .git/hooks/pre-push << 'EOF'
#!/bin/bash

# DCE Platform Pre-Push Hook
# Additional security checks before pushing to remote
# Auto-generated by setup-git-hooks.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔐 DCE Platform - Pre-Push Security Check${NC}"
echo -e "${BLUE}=========================================${NC}"

# Get information about what we're pushing
remote="$1"
url="$2"

# Check if we're pushing to main/master branch
while read local_ref local_sha remote_ref remote_sha; do
    if [[ "$remote_ref" == "refs/heads/main" ]] || [[ "$remote_ref" == "refs/heads/master" ]]; then
        echo -e "${YELLOW}⚠️  Pushing to production branch: ${remote_ref##*/}${NC}"
        echo -e "${YELLOW}🔍 Running additional security scans...${NC}"
        
        # Scan the entire codebase for secrets (not just staged files)
        if [ -f "scripts/pre-commit-secret-scan.js" ]; then
            echo -e "${YELLOW}📊 Scanning entire codebase for secrets...${NC}"
            
            # Use git to scan all files in the commit range
            if git diff --name-only "$remote_sha..$local_sha" | head -20 | while read file; do
                if [ -f "$file" ]; then
                    echo "Checking: $file"
                fi
            done; then
                echo -e "${GREEN}✅ Codebase scan completed${NC}"
            else
                echo -e "${YELLOW}⚠️  Some files could not be scanned${NC}"
            fi
        fi
        
        # Check for common dangerous patterns in commit messages
        commit_messages=$(git log --format=%B "$remote_sha..$local_sha")
        if echo "$commit_messages" | grep -i -E "(password|secret|key|token|credential)" > /dev/null; then
            echo -e "${YELLOW}⚠️  Commit messages contain sensitive keywords${NC}"
            echo -e "${YELLOW}Please review commit messages for sensitive information${NC}"
        fi
        
        echo -e "${GREEN}✅ Pre-push security check completed${NC}"
    fi
done

echo -e "${GREEN}🚀 Push is safe to proceed${NC}"
exit 0
EOF

chmod +x .git/hooks/pre-push
echo -e "${GREEN}✅ Pre-push hook installed successfully${NC}\n"

# Test if Node.js is available
echo -e "${YELLOW}🧪 Testing git hooks...${NC}"

if command -v node &> /dev/null; then
    echo -e "${GREEN}✅ Node.js is available${NC}"
    
    # Test the pre-commit script
    if [ -f "scripts/pre-commit-secret-scan.js" ]; then
        echo -e "${YELLOW}Testing pre-commit script...${NC}"
        if node -c scripts/pre-commit-secret-scan.js; then
            echo -e "${GREEN}✅ Pre-commit script syntax is valid${NC}"
        else
            echo -e "${RED}❌ Pre-commit script has syntax errors${NC}"
        fi
    fi
else
    echo -e "${YELLOW}⚠️  Node.js not found. Hooks will check for Node.js at commit time.${NC}"
fi

# Create a test commit to verify hooks work
echo -e "${YELLOW}🧪 Creating test environment...${NC}"

# Create .githooks-test directory for testing
mkdir -p .githooks-test

# Create a test file with a fake secret
cat > .githooks-test/test-secret.txt << 'EOF'
# This is a test file to verify git hooks work
# It contains a fake secret that should be detected

API_KEY=sk_test_1234567890abcdef1234567890abcdef
EOF

# Stage the test file
git add .githooks-test/test-secret.txt 2>/dev/null || true

echo -e "${YELLOW}📋 Git Hooks Setup Complete!${NC}"
echo -e "${BLUE}==============================${NC}"
echo -e "${GREEN}✅ Pre-commit hook: Installed and configured${NC}"
echo -e "${GREEN}✅ Pre-push hook: Installed and configured${NC}"
echo -e "${GREEN}✅ Test environment: Created${NC}\n"

echo -e "${BLUE}📚 Usage Information:${NC}"
echo -e "${YELLOW}• Hooks will automatically run on git commit and git push${NC}"
echo -e "${YELLOW}• To bypass hooks (NOT RECOMMENDED): git commit --no-verify${NC}"
echo -e "${YELLOW}• To test hooks manually: git commit (on test files)${NC}"
echo -e "${YELLOW}• Test file location: .githooks-test/${NC}\n"

echo -e "${BLUE}🔧 Maintenance:${NC}"
echo -e "${YELLOW}• Hook scripts are in: .git/hooks/${NC}"
echo -e "${YELLOW}• Backup hooks are in: .git/hooks/*.backup.*${NC}"
echo -e "${YELLOW}• To update hooks: re-run this script${NC}\n"

# Clean up test files
echo -e "${YELLOW}🧹 Cleaning up test files...${NC}"
git reset .githooks-test/test-secret.txt 2>/dev/null || true
rm -rf .githooks-test/
echo -e "${GREEN}✅ Cleanup complete${NC}\n"

echo -e "${GREEN}🎉 Git hooks setup successful!${NC}"
echo -e "${GREEN}Your repository is now protected against secret commits.${NC}"